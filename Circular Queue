class MyCircularQueue:

    def __init__(self, k: int):
        """
        Initialize the circular queue with a given size 'k'.
        """
        self.queue = [0] * k  
        self.max_size = k     
        self.head = -1        
        self.tail = -1        
        self.count = 0        

    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return True if successful.
        """
        if self.isFull():
            return False  

        if self.isEmpty():
            self.head = 0  
        self.tail = (self.tail + 1) % self.max_size  # Move tail to next position
        self.queue[self.tail] = value
        self.count += 1
        return True

    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return True if successful.
        """
        if self.isEmpty():
            return False

        if self.head == self.tail:
            self.head = -1  
            self.tail = -1
        else:
            self.head = (self.head + 1) % self.max_size  

        self.count -= 1
        return True

    def Front(self) -> int:
        """
        Get the front item from the queue. Return -1 if the queue is empty.
        """
        if self.isEmpty():
            return -1
        return self.queue[self.head]

    def Rear(self) -> int:
        """
        Get the last item from the queue. Return -1 if the queue is empty.
        """
        if self.isEmpty():
            return -1
        return self.queue[self.tail]

    def isEmpty(self) -> bool:
        """
        Check if the circular queue is empty.
        """
        return self.count == 0

    def isFull(self) -> bool:
        """
        Check if the circular queue is full.
        """
        return self.count == self.max_size


