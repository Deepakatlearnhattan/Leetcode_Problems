#include <iostream>
#include <vector>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return helper(nums, 0, nums.size() - 1);
    }

private:
    TreeNode* helper(vector<int>& nums, int start, int end) {
        // Base case: no more elements to add
        if (start > end) {
            return NULL;
        }

        // Choose the middle element as the root to ensure balance
        int mid = start + (end - start) / 2; 
        TreeNode* root = new TreeNode(nums[mid]);

        // Recursively build the left and right subtrees
        root->left = helper(nums, start, mid - 1);
        root->right = helper(nums, mid + 1, end);

        return root;
    }
};

// Helper function to print the tree in a pre-order traversal
void preOrder(TreeNode* node) {
    if (node == NULL) {
        return;
    }

    cout << node->val << " ";
    preOrder(node->left);
    preOrder(node->right);
}


